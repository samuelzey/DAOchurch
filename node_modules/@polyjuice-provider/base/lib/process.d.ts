import { HexString } from "@ckb-lumos/base";
import { RawL2Transaction } from "@polyjuice-provider/godwoken";
import { Abi } from "./abi";
import { EthTransaction, Godwoker } from "./util";
import { SigningMessageType } from "./types";
export declare type SerializeSignedTransactionString = HexString;
export declare enum ProcessTransactionType {
    send = 0,
    call = 1,
    estimateGas = 2
}
export interface Process {
    type: ProcessTransactionType;
    signingMethod?: (message: string) => string | Promise<string>;
    executeEstimateGasMethod?: any;
    signingMessageType?: SigningMessageType;
}
export declare function buildSendTransaction(abi: Abi, godwoker: Godwoker, tx: EthTransaction, signingMethod: any, signingMessageType?: SigningMessageType): Promise<SerializeSignedTransactionString>;
export declare function executeCallTransaction(abi: Abi, godwoker: Godwoker, tx: EthTransaction): Promise<string>;
export declare function buildEstimateGasTransaction(abi: Abi, godwoker: Godwoker, tx: EthTransaction): Promise<RawL2Transaction>;
export declare function buildProcess(abi: Abi, godwoker: Godwoker, tx: EthTransaction, process: Process): Promise<HexString | RawL2Transaction>;
export declare function buildSerializeAddressMappingAbiItem(abi: Abi, data: HexString): string;
