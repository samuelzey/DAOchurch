import { WebsocketProvider } from "web3-providers-ws";
import { WebsocketProviderOptions } from "web3-core-helpers";
import { Abi, Godwoker, PolyjuiceConfig, Signer, AbiItems } from "@polyjuice-provider/base";
import { JsonRpcPayload, JsonRpcResponse, RequestItem } from "web3-core-helpers";
declare const Web3WsProvider: any;
export interface PolyjuiceWebsocketProvider extends Omit<WebsocketProvider, "requestQueue" | "responseQueue"> {
    godwoker: Godwoker;
    abi: Abi;
    signer: Signer;
    requestQueue: Map<number | string, RequestItem>;
    responseQueue: Map<number | string, RequestItem>;
    constructor(host: string, polyjuiceConfig: PolyjuiceConfig, option?: WebsocketProviderOptions): any;
    send(payload: JsonRpcPayload, callback: (error: Error | null, result?: JsonRpcResponse) => void): Promise<void>;
}
export declare class PolyjuiceWebsocketProvider extends Web3WsProvider {
    godwoker: Godwoker;
    abi: Abi;
    signer: Signer;
    requestQueue: Map<number | string, RequestItem>;
    responseQueue: Map<number | string, RequestItem>;
    constructor(host: string, polyjuiceConfig: PolyjuiceConfig, option?: WebsocketProviderOptions);
    setAbi(abiItems: AbiItems): void;
    simulateWebsocketResponse(result: JsonRpcResponse, id: string | number): void;
}
export {};
